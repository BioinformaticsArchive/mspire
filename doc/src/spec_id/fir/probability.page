---
title: Probability
inMenu: true
directoryName: Probability
---
False Identification Rates with Probabilistic IDs
-------------------------------------------------

mspire can be used to determine false identification rates for peptides hits associated with a probability of being correct.  Here is the basic usage (following are more detailed examples):

    require 'spec_id/precision/prob'

    spec_id = SpecID.new("peptide_prophet.xml")  # a peptide prophet output file
    options = {
      :validators => [val1, val2],
    }
    answer = SpecID::Precision::Prob.new.precision_vs_num_hits(spec_id, options)
    out[:count]             # the number of peptides 
    out[:pephits]           # parallel array of each peptide hit

    out[:pephits_precision] # => parallel to the :validators array in options
    out[:pephits_precision].each do |precision_ar|
      # each precision_ar is a parallel to :count and :pephits
      out[:count].zip(precision_ar) do |num, precision|
        ## num, precision
      end
    end

    # Then one can plot the pephits_precision vs. the count as an x,y series
    (see http://rgplot.rubyforge.org/ for simple plotting from ruby)

Different validation methods are available.  This example assumes that a concatenated decoy database search was performed and the results searched by Peptide Prophet (with no explicit -d flags used, i.e., PeptideProphet has no knowledge that some of the hits are bad)

    prob_val = Validator::Probability.new
    decoy_val = Validator:: Decoy.new(:constaint => /^DECOY_/, :decoy_to_target_ratio => 1.0)

    options = {
      :validators => [prob_val, decoy_val]
    }
    answer = SpecID::Precision::Prob.new.precision_vs_num_hits(spec_id, options)

The precision is calculated as `SUM(1-x)/n` where x is the probability of a hit
being correct and n is the number of hits.

When decoy hits are present, mspire adjusts the calculated precision based on
the probability: `(1+R)*prec / (R*precision +1)` where R is the decoy_to_target
ratio used in the decoy validator (R = 0.0 if no decoy validator).  How the
decoy probability is determined is explained [here](filtering.html) under the
concatenated DB search section.

Commandline Interface
---------------------

This will run the above analysis on a peptide prophet file and output the results in YAML format:

    prob_validate.rb peptide_prophet.xml --decoy /^DECOY_/ --prob \
        --output yaml:output.yml

Type `prob_validate.rb` for more options.

