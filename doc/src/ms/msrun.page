---
title: MSRun
inMenu: true
directoryName: mspire 
---

Object Model
============

![MS::MSRun object model](../images/msrun_object_model.png "MS:MSRun Object model")

The diamonds represent composition (e.g., an msrun is composed of scans).  Lines represent associations.

Examples
========

MS::MSRun objects are meant to capture LC/MS and LC/MS(n) runs.  The object model will still read in MALDI data, but it will not capture all the information useful to spotted scanning.

Reading a file or io object
---------------------------

    require "ms/msrun" 

    ms = MS::MSRun.new("file.mzXML")        # an mzXML file
    ms = MS::MSRun.new("file.mzData")        # an mzData file

    # also takes an io object
    ms = File.open("file.mzXML") {|io| MS::MSRun.new(io) }

Accessing run information
-------------------------

    ms.start_time
    ms.end_time

    ms.scan_count    # number of scans
    ms.scan_count(0) # same thing (number of scans)
    ms.scan_count(1) # number of MS scans
    ms.scan_count(2) # number of MS/MS scans, etc.
    
Accessing scan information
--------------------------

    ms.scans.each do |scan|
      scan.num          # scan number
      scan.ms_level     # ms_level
      scan.time         # retention time in seconds
      scan.start_mz     # the first m/z value
      scan.end_mz       # the last m/z value

      pr = scan.precursor  # an MS::Precursor object!
      pr.mz
      pr.intensity
      pr.parent         # the parent scan
      pr.charge_states  # Array of possible charge states of the precursor
                        # ('charge_states' is not always defined)
    end

The precursor intensity is not always defined in mass spec files.  Some magic
happens under the hood if you request an intensity and its not defined: the
parent scan's spectrum is queried for the intensity at that m/z (does a fast
binary search for the nearest m/z value since rounding errors make an exact
match uncertain.  It's fast enough that you probably won't notice the time it
takes).  If you don't read in the spectra (see :no_spectra) and the intensity
is not defined in the xml file itself, then this will return nil.

Lazy evaluation of spectra
--------------------------

mspire gives the user the option of what type of lazy evalution to use
    
### :lazy => :string

    ms = MS::MSRun.new("file.mzXML")
    ms = MS::MSRun.new("file.mzXML", :lazy => :string) # the same thing

    ms.scans.each do |scan|
      mz_ar = scan.spectrum.mzs   # now the string is converted into an array
      intensity_ar = scan.spectrum.intensities # now converted too
    end

By default spectral information is decoded from base64 strings
and held until spectral information is requested.  This is the most compact
way to store spectra and is sufficient for most files.  For mzXML files, peaks
are deconvolved into an array of m/z data and an array of intensity data so
that subsequent access of mz and intensity attributes are fast and independent
of one another.

### :lazy => :io

The easiest way to use the `:lazy => :io` option is with the `MS::MSRun.open` method:

    MS::MSRun.open("file.mzXML") do |ms|
      # do something with your ms object here ...
      # ... ms.scans etc. ...
    end

This is equivalent to doing this:

    File.open("file.mzXML") do |io|
      ms = MS::MSRun.new(io, :lazy => :io)
      # do something with your ms object here ...
      # ... ms.scans etc. ...
    end

    # this is NOT allowed and will raise an exception! (must be an io object)
    ms = MS::MSRun.new("file.mzXML", :lazy => :io)

*NOTE:* if you have an mzXML file (does not apply to mzData or mzML) its best to access your data with 'mzs_and_intensities' when using :lazy => :io

    (mzs, intensitites) = ms.scans.first.spectrum.mzs_and_intensities

Using the conventional access shown below is twice as slow as above for mzXML (again, this does *not* apply to mzData or mzML) since each call reads and decodes the spectral information for itself.

    # slow for mzXML files under :lazy => :io
    mzs = ms.scans.first.spectrum.mzs
    intensities = ms.scans.first.spectrum.intensities

Spectra store byte indices into the io object and read and convert
to spectra when information is called.  This should be used for _really_ large
files > 300 MB ?) Typically, this is the fastest mode of access, even if you
are going to read all the spectrum.  However, since spectra are decoded for
each call, this can be slow for repeated querying of spectral information.
Also, since mzXML spectra are stored as peaks, two separate calls to get m/z's
and intensities will take longer than other methods.  For mzXML files, access
spectral information with the `mzs_and_intensities` method.
    
### :lazy => :no_spectra

    ms = MS::MSRun.new("file.mzXML", :lazy => :no_spectra)
    ms.scans.first.precursor.mz      # most information is still available
    ms.scans.first.spectrum # => nil

Spectral information is not read in the from the file (but all other information is)

### :lazy => :not

    ms = MS::MSRun.new("file.mzXML", :lazy => :not)

This reads and parses all data at the beginning (it's not lazy).  If you have
a medium to small file (< 90MB on a 2GB memory machine) and you plan to access
spectral information over and over, this option is for you.
